#!/usr/bin/env python3
# -*- coding: utf-8 -*-
'''
Pentestor is a tool to automatise basic tasks during a Pentest.
'''

import argparse
import configparser
from termcolor import colored
from pyfiglet import Figlet
from questionary import questionary, Separator, Choice

from core.config import cfg
from core.modules.nmap.main import NmapModule
from core.modules.scan.main import ScanModule
from core.modules.waf.main import WafModule
from core.modules.osint.main import OsintModule
from core.modules.gobuster.main import GoBusterModule

PARSER = argparse.ArgumentParser()
PARSER.add_argument('-u', '--url', type=str, help='define the targeted url', required=True)
ARGS = PARSER.parse_args()

CFG = configparser.ConfigParser()
CFG.read('config.ini')

def display_banner():
    '''Function to display the ascii art text'''
    custom_fig = Figlet(font='doom')
    print(colored(custom_fig.renderText("Pentestor"), 'green'))
    print(colored('host: %s\r\n' % cfg.get().host, 'cyan'))

def display_menu():
    '''Function to display the main menu'''
    answer = questionary.select(
        "What do you want to do?",
        choices=[
            Separator('---- NMAP ---'),
            Choice('Nmap (fast)', "NmapModule.fast_scan()"),
            Choice('Nmap (full)', "NmapModule.full_scan()"),
            Choice('Nmap (fast + full)', "NmapModule.fast_full_scan()"),
            Separator('----- SCAN -----'),
            Choice('Internet archives fast scan', "ScanModule.get_internet_archives()"),
            Choice('Internet archives full scan (dump all links recursively)', "ScanModule.get_internet_archives(True)"),
            Choice('SSL Scan (Qualys)', "ScanModule.get_ssl_scan()"),
            Separator('----- WAF -----'),
            Choice('wafw00f scan', "WafModule.start_wafw00f_scan()"),
            Separator('----- OSINT -----'),
            Choice('Shodan scan', "OsintModule.start_shodan_scan()"),
            Separator('----- WEBFUZZ -----'),
            Choice('GoBuster Directories Web Fuzz (GET)', "GoBusterModule.start_webfuzz()")
        ]
    ).ask()

    exec(answer)

def load_config():
    '''Load the configuration'''
    cfg.get().author = CFG['DEFAULT']['AUTHOR']

    if ARGS.url.endswith('/'):
        ARGS.url = ARGS.url[:-1]

    cfg.get().url = ARGS.url
    cfg.get().host = ARGS.url.split('//')[-1].split('/')[0]
    cfg.get().host_without_www = cfg.get().host.replace('www', '')
    cfg.get().output_dir = 'output/{}'.format(cfg.get().host)

def main():
    '''Main Function'''
    try:
        load_config()
        display_banner()
        display_menu()
    except (KeyboardInterrupt, SystemExit) as ex:
        print(ex)
        raise

if __name__ == '__main__':
    main()
